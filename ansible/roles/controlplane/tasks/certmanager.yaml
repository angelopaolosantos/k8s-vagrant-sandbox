---
# file: roles/controlplane/tasks/certmanager.yml

- name: Copy cert-manager root certificates
  become_user: root
  copy:
    src: "{{ role_path }}/files/certs/"
    remote_src: no
    dest: /opt/ca-certificates/
    mode: 0444

- name: Install Cert Manager  via YAML Manifests
  shell: |
    kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.11.0/cert-manager.yaml

- name: Create Cert Manager tls secret
  shell: |
    kubectl create secret tls -n cert-manager root-ca \
    --cert=/opt/ca-certificates/root-ca.pem \
    --key=/opt/ca-certificates/root-ca-key.pem
  failed_when: false

- name: Wait for Cert Manager to be available
  shell: |
    kubectl wait deployment -n cert-manager {{ item }} --for condition=Available=True --timeout=120s
  with_items:
    - cert-manager
    - cert-manager-cainjector
    - cert-manager-webhook
  register: cert_manager_deployment_ready

- debug: var=cert_manager_deployment_ready

- debug: msg="item.item={{item.item}}, item.stdout={{item.stdout}}, item.changed={{item.changed}}"
  with_items: "{{ cert_manager_deployment_ready.results }}"

- debug: msg="Gets printed only if this item changed - {{item}}"
  when: "{{item.changed == true}}"
  with_items: "{{ cert_manager_deployment_ready.results }}"

# - name: Create Cert-Manager Cluster Issuer
#   shell: 
#     cmd: |
#       kubectl apply -f - <<EOF
#       apiVersion: cert-manager.io/v1
#       kind: ClusterIssuer
#       metadata:
#         name: ca-issuer
#       spec:
#         ca:
#           secretName: root-ca
#       EOF
## Same as below tasks

- name: Copy cert-manager manifests to kubemaster node
  copy:
    src: "{{ role_path }}/files/certmanager/"
    remote_src: no
    dest: /home/vagrant/certmanager/

- name: Create Cert-Manager Cluster Issuer
  delay: 10
  register: create_issuer
  until: create_issuer is not failed
  retries: 30
  shell: |
      kubectl apply -f ./certmanager/
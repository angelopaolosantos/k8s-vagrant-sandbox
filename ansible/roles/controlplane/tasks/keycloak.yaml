---
# file: roles/controlplane/tasks/keycloak.yaml

- name: Copy keycloak manifests to kubemaster node
  become_user: vagrant
  copy:
    src: "{{ role_path }}/files/keycloak/"
    remote_src: no
    dest: /home/vagrant/keycloak/

# Use task below if cert-manager is not used to create keycloak secret tls, follow Readme instructions to generate key and cert. 
#
# - name: create keycloak secret 
#   shell: |
#     kubectl create secret tls -n keycloak keycloak.cluster-tls \
#     --cert=.ssl/cert.pem \
#     --key=.ssl/key.pem
#   args:
#     chdir: /home/vagrant/keycloak/

- name: Apply keycloak manifests to create keycloak roles, and storage classes and persistent volume
  become_user: vagrant
  shell: |
    kubectl apply -f ./keycloak/

- name: Add helm repository
  become_user: vagrant
  kubernetes.core.helm_repository:
    name: bitnami
    repo_url: https://charts.bitnami.com/bitnami

- name: Install Keycloak via helm
  become_user: vagrant
  kubernetes.core.helm:
    name: keycloak
    chart_ref: bitnami/keycloak
    release_namespace: keycloak
    create_namespace: true
    values:
      global:
        # storageClass: local-storage
        # Make sure rancher local-path-provisioner is installed
        storageClass: local-path
      auth:
        createAdminUser: true
        adminUser: admin
        adminPassword: admin
        managementUser: manager
        managementPassword: manager
      proxyAddressForwarding: true
      ingress:
        ingressClassName: nginx
        annotations: 
          # add an annotation indicating the issuer to use.
          cert-manager.io/cluster-issuer: ca-issuer
        enabled: true
        hostname: "{{ keycloak_domain }}"
        tls: true
        extraTls: # < placing a host in the TLS config will determine what ends up in the cert's subjectAltNames
          - hosts:
              - "{{ keycloak_domain }}"
            secretName: keycloak.cluster-tls
      postgresql:
        enabled: true
        postgresqlPassword: password
      tls:
        enabled: true
        existingSecret: keycloak.cluster-tls
      proxy: edge

## Kubeapiserver pod doesn't resolve CoreDNS custom address, it seems to be intentional behavior in Kubernetes to avoid circular dependencies: as DNS is directly reflected by apiserver state.

- name: Copy kube-apiserver manifests to kustomize base folder
  copy:
    src: "/etc/kubernetes/manifests/kube-apiserver.yaml"
    remote_src: yes
    dest: "/home/vagrant/keycloak/kustomize/base/kube-apiserver.yaml"
  args: 
    force: no
  tags:
    - keycloak

- name: Run kustomize to add host alias in kube-apiserver
  shell: |
    sudo kubectl kustomize overlays/dev | sudo tee /etc/kubernetes/manifests/kube-apiserver.yaml
  tags:
    - keycloak
  args:
    chdir: /home/vagrant/keycloak/kustomize/
---
# file: setup_nodes.yaml

- hosts: all
  roles:
    - common

- hosts: kubemaster01
  become: true
  tasks:
  - name: Copy CA to node
    copy:
      src: "roles/controlplane/files/certs/"
      remote_src: no
      dest: /opt/keycloak-ca/

  - name: Check if cluster is initialized
    shell: kubectl get cs | grep -c ok
    register: kubeadm_status
    become_user: vagrant
    failed_when: kubeadm_status.rc == 2 # grep returns error code 2 for exceptions
    changed_when: false # so that the task won't be reported as "changed" every single time

  - name: Reset Cluster if initialized but not configured in kubectl
    shell: |
      kubeadm reset -f # force reset misconfigured cluster
      rm -rfv /etc/kubernetes /var/lib/kubelet /var/lib/etcd /etc/cni/net.d
      iptables --flush
    when: kubeadm_status.stdout == "0"
    failed_when: false
    changed_when: false

  - name: Copy cluster config into /etc/kubernetes
    copy:
      dest: "/opt/vagrant-cluster-config.yaml"
      content: |
        apiVersion: kubeadm.k8s.io/v1beta3
        kind: InitConfiguration
        localAPIEndpoint:
          advertiseAddress: 192.168.56.2
          bindPort: 6443
        ---
        apiVersion: kubeadm.k8s.io/v1beta3
        kind: ClusterConfiguration
        networking:
          serviceSubnet: "10.100.0.0/16"
          podSubnet: "10.244.0.0/16"
        apiServer:
          extraArgs:
            oidc-client-id: kube
            oidc-issuer-url: "https://keycloak.localdev.me/realms/master"
            oidc-username-claim: email
            oidc-groups-claim: groups
            oidc-ca-file: "/opt/keycloak-ca/root-ca.pem"
          extraVolumes:
          - name: "keycloak-ca"
            hostPath: "/opt/keycloak-ca/"
            mountPath: "/opt/keycloak-ca/"
            readOnly: true
            pathType: DirectoryOrCreate

  - name: Initialize Cluster
    shell: kubeadm init --config /opt/vagrant-cluster-config.yaml
    when: kubeadm_status.stdout == "0"

  - debug: var=kubeadm_status.stdout_lines

  - name: Create /home/vagrant/.kube Directory
    file:
      path: "/home/vagrant/.kube"
      state: directory
    become_user: vagrant

  - name: Copy /etc/kubernetes/admin.conf to local folder
    copy:
      src: /etc/kubernetes/admin.conf
      remote_src: yes
      dest:
        /home/vagrant/.kube/config
        # force: no

  - name: Download admin.conf
    ansible.builtin.fetch:
      src: /etc/kubernetes/admin.conf
      dest: .kube/{{ inventory_hostname }}/
      flat: yes

  - name: Set /home/vagrant/.kube Directory Owner and Group to vagrant
    shell:
      cmd: sudo chown $(id -u):$(id -g) $HOME/.kube/config
    become_user: vagrant

  - name: Kubernetes configuration file should not be group-readable.
    shell:
      cmd: sudo chmod go-r ~/.kube/config
    become_user: vagrant

  # - name: Install Weave Net
  #   shell:
  #     cmd: |
  #       kubectl apply -f https://github.com/weaveworks/weave/releases/download/v2.8.1/weave-daemonset-k8s.yaml
  #   become_user: vagrant

  - name: Get join command
    shell: kubeadm token create --print-join-command 2>/dev/null
    register: join_command_raw

  - name: Set join command
    set_fact:
      join_command: "{{ join_command_raw.stdout_lines[0] }}"

- hosts: workers
  become: true
  tasks:
  - name: join cluster
    shell: "{{ hostvars['kubemaster01'].join_command }} >> node_joined.txt"
    args:
      chdir: $HOME
      creates: node_joined.txt # Runs task only once since file is created once
  - name: create local persistent volume directory (keycloak)
    ansible.builtin.file:
      path: /mnt/kubernetes-pv
      state: directory
      mode: '0755'

- name: Fix Nodes NotReady Status
  hosts: all
  become: true
  tasks:
    - name: systemctl daemon-reload
      ansible.builtin.systemd:
        daemon_reload: yes
    - name: Restart kubelet service
      ansible.builtin.systemd:
        name: kubelet
        state: restarted
    - name: Restart containerd service
      ansible.builtin.systemd:
        name: containerd
        state: restarted
  tags:
    - restart_services